
#coding:utf-8
from tensorflow.contrib.layers import flatten
import tensorflow as tf
import os

os.environ['TF_CPP_MIN_LOGLEVEL'] = "2"
# os.environ['CUDA_DEVICE_ORDER'] = "PCI_BUS_ID"
# os.environ['CUDA_VISIBLE_DEVICES'] = "3"
import numpy as np
from sklearn.utils import shuffle
from tensorflow.examples.tutorials.mnist import input_data




class lenet():
    def __init__(self,lr, is_trained=True):

        self.x = tf.placeholder(tf.float32, [None, 32, 32, 1])
        self.label = tf.placeholder(tf.float32, [None, 10])
        self.learningRate = lr
        self.keep_prob = tf.constant(0.6)
        with tf.variable_scope("Lenet") as scope:
            self.logit = self.net_build(is_trained, self.x)

        # Create loss
        self.loss = tf.nn.softmax_cross_entropy_with_logits(logits=self.logit, labels=self.label, name=None)
        self.loss = tf.reduce_mean(self.loss)

        correct_prediction = tf.equal(tf.argmax(self.logit, 1), tf.argmax(self.label, 1))
        self.accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

        self.plot1 = tf.summary.scalar('loss',self.loss)
        self.plot2 = tf.summary.scalar('accuracy',self.accuracy)
        self.summary_op = tf.summary.merge_all()
        self.train_op = tf.train.AdamOptimizer(lr).minimize(self.loss)


    def ConvLayer(self,shape,layerName,inputX,isTrainable):
        with tf.variable_scope(layerName) as scope:
            conv_W = tf.get_variable(name=layerName+"_W", shape=shape,
                                      initializer=tf.truncated_normal_initializer(mean=0, stddev=0.01),trainable=isTrainable)
            conv_b = tf.get_variable(name=layerName+"_b", shape=shape[3], initializer=tf.truncated_normal_initializer(mean=0, stddev=0.01),trainable=isTrainable)
            conv = tf.nn.conv2d(inputX, conv_W, strides=[1, 1, 1, 1], padding='VALID') + conv_b
            conv = tf.nn.relu(conv)
            return conv

    def PoolingLayer(self,layerName,inputX):
        with tf.variable_scope(layerName) as scope:
            pool = tf.nn.max_pool(inputX, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')
            return pool

    def FullConnectedLayer(self,shape,layerName,inputX,isTrainable):
        with tf.variable_scope(layerName) as scope:
            fc_W = tf.get_variable(name=layerName+"_W", shape=shape,
                                    initializer=tf.truncated_normal_initializer(mean=0, stddev=0.01),trainable=isTrainable)
            fc_b = tf.get_variable(name=layerName+"_b", shape=shape[1], initializer=tf.truncated_normal_initializer(mean=0, stddev=0.01),trainable=isTrainable)
            fc = tf.matmul(inputX, fc_W) + fc_b
            return fc

    def net_build(self, is_trained, x):
        # x = tf.reshape(x,[-1,32,32,1])
        conv1 = self.ConvLayer([5,5,1,6],'Conv1',x,is_trained)
        pool1 = self.PoolingLayer('pool1',conv1)
        conv2 = self.ConvLayer([5,5,6,16],'Conv2',pool1,is_trained)
        pool2 = self.PoolingLayer('pool2',conv2)
        flat   = flatten(pool2)
        fc1 = tf.nn.relu(self.FullConnectedLayer([5*5*16,120],'Fc1',flat,is_trained))
        fc1 = tf.nn.dropout(fc1,self.keep_prob)
        fc2 = tf.nn.relu(self.FullConnectedLayer([120,84],'Fc2',fc1,is_trained))
        self.fc2 = fc2
        logits = self.FullConnectedLayer([84, 10], 'Fc3', fc2,is_trained)
        return logits


def evaluate(X_data, y_data):
    num_examples = len(X_data)
    total_accuracy = 0
    count = 0
    sess = tf.get_default_session()
    for offset in range(0, num_examples, batch_size):
        batch_x, batch_y = X_data[offset:offset + batch_size], y_data[offset:offset + batch_size]
        accuracy = sess.run(net.accuracy, feed_dict={net.x: batch_x, net.label: batch_y})
        total_accuracy += accuracy
        count += 1
    return total_accuracy / count


if __name__ == '__main__':

    epochs = 10
    batch_size = 128

    mnist = input_data.read_data_sets(r"C:\Users\lon\Documents\slowlon\TFdemo\mnist\Mnist_data",
                                      one_hot=True, reshape=False)
    X_train, y_train = mnist.train.images, mnist.train.labels
    X_validation, y_validation = mnist.validation.images, mnist.validation.labels
    X_test, y_test = mnist.test.images, mnist.test.labels
    # 由于网络输入要求是32，而 mnist 是28*28
    X_train = np.pad(X_train, ((0, 0), (2, 2), (2, 2), (0, 0)), 'constant')
    X_validation = np.pad(X_validation, ((0, 0), (2, 2), (2, 2), (0, 0)), 'constant')
    X_test = np.pad(X_test, ((0, 0), (2, 2), (2, 2), (0, 0)), 'constant')

    net = lenet(0.001)

    saver = tf.train.Saver()

    # 训练网络
    with tf.Session() as sess:
        log_writer = tf.summary.FileWriter('checkpoints', sess.graph)
        sess.run(tf.global_variables_initializer())
        num_examples = len(X_train)
        total_batch = num_examples // batch_size
        for e in range(epochs):
            X_train, y_train = shuffle(X_train, y_train)
            for offset in range(0, num_examples, batch_size):
                end = offset + batch_size
                batch_x, batch_y = X_train[offset:end], y_train[offset:end]
                _, train_loss, train_acc,summary_train = sess.run([net.train_op, net.loss, net.accuracy,net.summary_op],
                                                    feed_dict={net.x: batch_x, net.label: batch_y})

            validation_accuracy = evaluate(X_validation, y_validation)
            print("epoch:{} ".format(e + 1))
            print("Train Loss:{:.5f}, Train Acc:{:.5f},  Validation Accuracy:{:.5f}".format(train_loss, train_acc,
                                                                                            validation_accuracy))
            log_writer.add_summary(summary_train, e)

        saver.save(sess, 'checkpoints/lenet.ckpt')

        print("Lenet Model saved")

    # 进行测试
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        saver.restore(sess, 'checkpoints/lenet.ckpt')
        test_accuracy = evaluate(X_test, y_test)
        print("Test Accuracy = {:.3f}".format(test_accuracy))




然后我们再另外写一个文件来专门进行 embeding 操作，这个文件的创建 metadata 和 meta_image的函数借鉴了网络上能看到的一个例子，然后再上面加了注释和补充，使它成为了一个完整的案例：

#coding:utf-8
import tensorflow as tf
import numpy as np
from tensorflow.examples.tutorials.mnist import input_data
from tensorflow.contrib.tensorboard.plugins import projector
import matplotlib.pyplot as plt
from lenet_training import lenet
import os

# 自定义sprite文件和meta文件，创建每个点使用的小图
def create_sprite_image(images):
    """Returns a sprite image consisting of images passed as
     argument. Images should be count x width x height  """
    if isinstance(images, list):
        images = np.array(images)
    img_h = images.shape[1]
    img_w = images.shape[2]
    n_plots = int(np.ceil(np.sqrt(images.shape[0])))

    spriteimage = np.ones((img_h * n_plots, img_w * n_plots))

    for i in range(n_plots):
        for j in range(n_plots):
            this_filter = i * n_plots + j
            if this_filter < images.shape[0]:
                this_img = images[this_filter]
                spriteimage[i * img_h:(i + 1) * img_h,
                j * img_w:(j + 1) * img_w] = this_img

    return spriteimage


def sprite_and_meta_writer(batch_xs, batch_ys):
    to_visualise = np.reshape(batch_xs, (-1, 32, 32)) #转换图片形状为3D
    to_visualise = 1 - to_visualise # 转换背景颜色为白色

    sprite_image = create_sprite_image(to_visualise)

    plt.imsave(os.path.join(LOG_DIR, 'mnistdigits.png'), sprite_image, cmap='gray')
    
    # 创建 metadata.tsv 的标签 文件
    with open(os.path.join(LOG_DIR, 'metadata.tsv'), 'w') as f:
        # f.write("Index\tLabel\n")
        # 但是注意 Single column metadata should not have a header row. 单列的metadata 不能有头文字描述
        for index, label in enumerate(batch_ys):
            # 按照这个被注释的指定方式，每个点上面悬浮的是它的序号索引值，如果只写label，那么每个点上悬浮的是它的label
            # f.write("%d\t%d\n" % (index, label))   # 'metadata.tsv'  就是一个 序号index加label的两列数据文件
            f.write("%d\n" % (label))   # 'metadata.tsv'  就是一个 序号index加label的两列数据文件





if __name__ == '__main__':

    """
    这个可视化的操作实际上最简单的只需要两个步骤：
    1 指定需要可视化的2D变量（不指定也可以，会显示默认可以显示的2D变量）
    embedding_var = tf.Variable(xxx, name='xxx')  # 需要可视化的变量，只能是2D的

    2 保存模型的结果，然后在tensorboard里面就可以看到每个2D变量经过降维之后的展示
    saver = tf.train.Saver()
    saver.save(sess, os.path.join(LOG_DIR, "embeding_model.ckpt"), 1)

    3 （可选）给embedding_var关联metadata文件，这样我们就可以知道每个点的标签了
    
    """

    mnist = input_data.read_data_sets(r"C:\Users\lon\Documents\slowlon\TFdemo\mnist\Mnist_data", reshape=False,
                                      one_hot=True)

    # 配置
    LOG_DIR = 'checkpoints'
    batch_size = 512


    # 定义网络结构
    net = lenet(0.001, False)
    # 导入模型变量值
    saver = tf.train.Saver()
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        saver.restore(sess, 'checkpoints/lenet.ckpt')

        # 获取要展示的图片数据
        batch_xs, batch_ys = mnist.test.next_batch(batch_size)
        # pading 图片
        x_batch = np.pad(batch_xs, ((0, 0), (2, 2), (2, 2), (0, 0)), 'constant')
        # 创建需要的 metadata.tsv 标注文件和每个点需要的图片文件
        sprite_and_meta_writer(x_batch, np.argmax(batch_ys, axis=1))

        # 获取第二个全连接层的特征作为展示，也可以换为其他的
        fc2_samples = sess.run([net.fc2], feed_dict={
            net.x: x_batch,
            net.label: batch_ys, })[0]


        # *****可视化的设置*****
        embedding_var = tf.Variable(fc2_samples, name='fc2_samples')  # 需要可视化的变量，只能是2D的
        sess.run(embedding_var.initializer) # 使用之前还需要再初始化一次

        summary_writer = tf.summary.FileWriter(LOG_DIR)

        # 建立 embedding projector：指定想要可视化的 variable 的 metadata 文件的位置
        config = projector.ProjectorConfig()
        embedding = config.embeddings.add()
        embedding.tensor_name = embedding_var.name

        # Specify where you find the metadata
        embedding.metadata_path = 'metadata.tsv'  # 这里必须写成相对路径 ，
        # 因为它是在相对于 tensorboard logdir 的相对路径中寻找的metadata文件，所以不能传入绝对路径，
        # 下面的mnistdigits.png也一样，否则会出现 chrome，  parsing metadata 界面，
        # 但是一直卡住没有进展，这就是因为它找不到这个metadata.tsv文件导致的

        # Specify where you find the sprite (we will create this later)
        # 这个图片是每个数据点使用的小图片，但是这里是生成了一张大图包含了这么多张小图，
        # 而这个小图是怎么分配到每个点的还是不是很清楚,猜测是通过single_image_dim来逐个读取的,
        # 类似于 label 的 metadata逐个读取方式
        embedding.sprite.image_path = 'mnistdigits.png'
        embedding.sprite.single_image_dim.extend([32, 32])

        # Say that you want to visualise the embeddings 保存配置文件
        # Saves a config file that TensorBoard will read during startup.
        projector.visualize_embeddings(summary_writer, config)


        saver = tf.train.Saver() # 保存模型文件，注意和保存配置文件在一个文件夹
        saver.save(sess, os.path.join(LOG_DIR, "embeding_model.ckpt"), 1)

        # 然后在保存路径打开 tensorboard 就可以看到效果了。





截一张效果图，还是很好看的：


编辑于 2018-06-13
著作权归作者所有
「真诚赞赏，手留余香」
赞赏
还没有人赞赏，快来当第一个赞赏的人吧！
分享到
​​​
TensorFlow 学习
深度学习（Deep Learning）
TensorFlow 学习系列笔记
TensorFlow 学习系列笔记
30 篇文章 · 1,559 人关注

投稿
评论

Liam

​
赞
期待更新关于tensorflow如何查看训练过程中各层feature map和各层运行时间的功能。

lonlon ago (作者)

​
赞
profile 模块可以了解下
查看全部 (2)

添加评论...

推荐阅读
循环神经网络(RNN)笔记——训练RNN
以下内容参考、引用部分书籍、帖子的内容，若侵犯版权，请告知本人删帖。 训练RNN的关键是将其按时序展开，然使用常用的反向传播即可，这种策略被称为时序反向传播(backpropagation through…
Tuo 的文章 · 5 赞同
TensorFlow数据预处理
转载注明出处：TensorFlow高效读取数据的方法 - 余昌黔|书山有路 - CSDN博客关于Tensorflow读取数据，官网给出了三种方法：供给数据(Feeding)： 在TensorFlow程序运行的每一步， 让Python代…
郑云飞的文章 · 7



https://dev.to/omenapps/modern-django-project-examples-58mm

https://stackoverflow.com/questions/52455488/django-rules-object-permissions
https://blog.csdn.net/zcyuefan/article/details/77743380

https://www.jerrycoding.com/article/site_building_12/
https://juejin.im/post/5cdfecd0f265da1b667baa36
http://yshblog.com/blog/174
https://www.jianshu.com/p/f4d7827821f1
https://github.com/pinax/pinax-notifications

 <td>
                                      <button class="btn btn-primary"><i class="fa fa-user-times"></i> </button>
                                      <li class="dropdown">
                                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">III
                                            <b class="caret"></b>
                                        </a>
                                        <ul class="dropdown-menu">
                                            <li>
                                                <a id="action-1" data-toggle="modal" data-target="#newMemberModal"> Add New Member</a>
                                            </li>
                                            <li>
                                                <a href="#">EJB</a>
                                            </li>
                                            <li>
                                                <a href="#">Jasper Report</a>
                                            </li>
                                            <li class="divider"></li>
                                            <li>
                                                <a href="#">分离的链接</a>
                                            </li>
                                            <li class="divider"></li>
                                            <li>
                                                <a href="#">另一个分离的链接</a>
                                            </li>
                                        </ul>
                                    </li>
                                  </td>

Client ID
987fa25c298147bf8d42
Client Secret
b72bf28d459e1f61b1b7f61a4db4195327be0a5c

IQSS/dataverse-client-python

<select class="form-control" onchange="ShowImage(parseInt(this.value), 'media');">
    <option selected="selected" value="1">内容1</option>
    <option value="2">内容2</option>
    <option value="3">内容3/option>
</select>

<div class="row" style="display: block;" id="media1"></div>
<div class="row" style="display: none;" id="media2"></div>
<div class="row" style="display: none;" id="media3"></div>

<script>
function ShowImage(page, tag){
    var i = 1;
    var el;
    while (el = document.getElementById(tag + i)) {
        if (i == page)
        el.style.display = 'block';
        else
        el.style.display = 'none';
        i++;
    }
}
</script>


def jaccard_similarity(list1, list2):
    intersection = len(list(set(list1).intersection(list2)))
    union = (len(list1) + len(list2)) - intersection
    return float(intersection) / union
def jaccard_sim(a, b):
    unions = len(set(a).union(set(b)))
    intersections = len(set(a).intersection(set(b)))
    return 1. * intersections / union
a = ['x', 'y']
b = ['x', 'z', 'v']
print(jaccard_sim(a, b))

@csrf_exempt
def test_submit(request):
    print(request.POST)
   
    data2 = json.loads(request.POST.get('data', ''))
    print(data2)
    for x in data2:
        print(x['name'])

    response_data = {}
    response_data['result'] = 's'
    response_data['message'] = 'hello'
    return JsonResponse(response_data)
 
 <script>
    function AjaxSubmit_set() {
        var data_list = [
            {'name':'james','age':34},
            {'name':'durant','age':31},
            {'name':'curry','age':30},
        ];
        
        $.ajax({
            url:'/test_submit/',
            type:'POST',
            tradition:true,
            data:{data:JSON.stringify(data_list)},
            success: function (data) {
                alert(data.message);

            }
        })
    }
</script>
   
   <div>
        <button type="button" id="test-submit" onclick="AjaxSubmit_set()" class="btn btn-outline-primary btn-rounded">test</button>
      </div>





<table class="table table-striped" id="pstable">
 <thead>
 <tr>
  <th>user</th>
  <th>pid</th>
  <th>cmd</th>
 </tr>
 </thead>
 <tbody>
 {% for ps in info.ps_data %}
 <tr>
  {% for item in ps %}
  <td>{{ item }}</td>
  {% endfor %}
 </tr>
 {% endfor %}
 </tbody>
 </table>
 
 
 2. <script type="text/javascript"> 
$(document).ready(function(){ 
 $("#gobtn").click(function(){ 
 var ip=$("#ip").val(); //获取输入框中的ip 
 $.post("/process/",{'hostip':ip}, //post函数到后端 
 function(data,status){ //回调函数 
 $("#pstable").html(data); //将id为pstable的标签的html替换为返回的data 
 $("#ip").val(ip) //将输入框的值改为查询的ip 
 }); 
}); 
});

def process_view(request): 
 hostip = request.POST.get('hostip') 
 logger.debug("host:%s" % hostip) 
 if hostip is None: 
 ps_data = GetHostPs('192.168.163.128') 
 info = {'username':request.user,'ps_data':ps_data} 
 template = 'process.html' 
 #return render(request,'process.html',{"info":info}) 
 elif hostip: 
 ps_data = GetHostPs(hostip) 
 info = {'username':request.user,'ps_data':ps_data} 
 template = 'pstable.html' 
 #return render(request,'pstable.html',{"info":info}) 
 else: 
 ps_data = GetHostPs('192.168.163.128') 
 info = {'username':request.user,'ps_data':ps_data} 
 template = 'pstable.html' 
 return render(request,template,{"info":info})
 
 <thead> 
 <tr> 
  <th>user</th> 
  <th>pid</th> 
  <th>cmd</th> 
 </tr> 
 </thead> 
 <tbody> 
 {% for ps in info.ps_data %} 
 <tr> 
  {% for item in ps %} 
  <td>{{ item }}</td> 
  {% endfor %} 
 </tr> 
 {% endfor %} 
 <tbody>
